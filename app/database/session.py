# Establish the connect with the database 

# create engine:- useful for working with the database(generating all the commands)
# To create the engine , we need :- db_url 
# To form the db_url, we need:- dialect + driver://username:password@host:port/db_name

from sqlalchemy import create_engine
from app.core.config.db_config import load_env_config
from sqlalchemy.orm import sessionmaker
from sqlalchemy.ext.declarative import declarative_base

db_config = load_env_config()
# validate keys
required_keys = ["DB_HOST", "DB_PORT", "DB_NAME", "DB_USER", "DB_PASSWORD"]
missing_keys = [key for key in required_keys if not db_config.get(key)]
if missing_keys:
    raise ValueError(f"Missing database configuration keys: {', '.join(missing_keys)}")

# build db_url
db_url = (f"postgresql://{db_config["DB_USER"]}:{db_config["DB_PASSWORD"]}",
           f"@{db_config["DB_HOST"]}:{db_config["DB_PORT"]}/{db_config["DB_NAME"]}")
# create engine
engine = create_engine("".join(db_url), echo=True)
# echo=True will log all the SQL statements generated by SQLAlchemy to the console.

# create session
SessionLocal = sessionmaker(autocommit=False, autoflush=False, bind=engine)

# bind, use the url we created above to bind the engine to the session
# dialect , certain way of talking to the database
# driver, how to talk to the database

Base= declarative_base()
# declarative_base() is used to create the ORM models, the tables
# help to write the tabular structure specification in the code


